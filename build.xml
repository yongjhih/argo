<!--
  ~ Copyright 2013 Mark Slater
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
  ~
  ~ 	http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
  -->

<project name="argo" default="compile">

    <description>
        Argo build file
    </description>

    <property name="location.lib" value="lib"/>
    <property name="location.lib.build" value="${location.lib}/build"/>
    <property name="location.documentation" value="docs"/>
    <property name="location.src" value="src/main"/>
    <property name="location.src.test-infrastructure" value="src/test-infrastructure"/>
    <property name="location.src.test" value="src/test"/>
    <property name="location.src.performance-test" value="src/performance-test"/>
    <property name="location.src.code-sample" value="src/code-samples"/>
    <property name="location.src.build" value="src/build"/>

    <property name="location.build" value="build"/>
    <property name="location.classes" value="${location.build}/classes"/>
    <property name="location.optimised-classes" value="${location.build}/optimised-classes"/>
    <property name="location.test-infrastructure-classes" value="${location.build}/test-infrastructure-classes"/>
    <property name="location.test-classes" value="${location.build}/test-classes"/>
    <property name="location.test-results" value="${location.build}/test-results"/>
    <property name="location.performance-test-classes" value="${location.build}/performance-test-classes"/>
    <property name="location.performance-test-results" value="${location.build}/performance-test-results"/>
    <property name="location.code-sample-test-classes" value="${location.build}/code-sample-classes"/>
    <property name="location.code-sample-test-results" value="${location.build}/code-sample-results"/>
    <property name="location.build-classes" value="${location.build}/build-classes"/>

    <property name="location.dist" value="${location.build}/dist"/>
    <property name="location.dist.maven" value="${location.dist}/maven"/>

    <property name="maven-staging-repository-id" value="sonatype-nexus-staging"/>
    <property name="maven-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2"/>

    <path id="all-libs">
        <fileset dir="${location.lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="test-compile-libs">
        <fileset dir="${location.lib}/test/compile">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="performance-test-compile-libs">
        <fileset dir="${location.lib}/performance-test/compile">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="performance-test-run-libs">
        <fileset dir="${location.lib}/performance-test/run">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="documentation-libs">
        <fileset dir="${location.lib}/documentation">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <typedef resource="org/tigris/subversion/svnant/svnantlib.xml">
        <classpath>
            <pathelement location="${location.lib.build}/svnant.jar"/>
            <pathelement location="${location.lib.build}/svnkit.jar"/>
            <pathelement location="${location.lib.build}/svnClientAdapter.jar"/>
            <pathelement location="${location.lib.build}/svnjavahl.jar"/>
        </classpath>
    </typedef>

    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant">
        <classpath>
            <pathelement location="${location.lib.build}/maven-ant-tasks-2.1.3.jar"/>
        </classpath>
    </typedef>

    <target name="compile" description="compiles all classes">
        <echo message="Starting compile"/>
        <delete dir="${location.classes}"/>
        <mkdir dir="${location.classes}"/>
        <delete dir="${location.optimised-classes}"/>
        <mkdir dir="${location.optimised-classes}"/>
        <delete dir="${location.test-infrastructure-classes}"/>
        <mkdir dir="${location.test-infrastructure-classes}"/>
        <delete dir="${location.test-classes}"/>
        <mkdir dir="${location.test-classes}"/>
        <delete dir="${location.performance-test-classes}"/>
        <mkdir dir="${location.performance-test-classes}"/>
        <delete dir="${location.code-sample-test-classes}"/>
        <mkdir dir="${location.code-sample-test-classes}"/>
        <delete dir="${location.build-classes}"/>
        <mkdir dir="${location.build-classes}"/>

        <javac destdir="${location.classes}" debug="on" source="1.5" target="1.5">
            <src path="${location.src}"/>
        </javac>

        <javac destdir="${location.optimised-classes}" debug="on" optimize="true" source="1.5" target="1.5">
            <src path="${location.src}"/>
        </javac>

        <javac destdir="${location.test-infrastructure-classes}" debug="on" source="1.7" target="1.7">
            <src path="${location.src.test-infrastructure}"/>
            <classpath refid="test-compile-libs"/>
            <classpath location="${location.classes}"/>
        </javac>

        <javac destdir="${location.test-classes}" debug="on" source="1.7" target="1.7">
            <src path="${location.src.test}"/>
            <classpath refid="test-compile-libs"/>
            <classpath location="${location.classes}"/>
            <classpath location="${location.test-infrastructure-classes}"/>
        </javac>

        <javac destdir="${location.performance-test-classes}" debug="on" source="1.7" target="1.7">
            <src path="${location.src.performance-test}"/>
            <classpath refid="performance-test-compile-libs"/>
            <classpath refid="test-compile-libs"/>
            <classpath location="${location.classes}"/>
        </javac>

        <javac destdir="${location.code-sample-test-classes}" debug="on" source="1.7" target="1.7">
            <src path="${location.src.code-sample}"/>
            <classpath refid="test-compile-libs"/>
            <classpath location="${location.classes}"/>
        </javac>

        <javac destdir="${location.build-classes}" debug="on" source="1.7" target="1.7"
               includeantruntime="false">
            <src path="${location.src.build}"/>
            <classpath refid="documentation-libs"/>
            <classpath location="${location.classes}"/>
        </javac>

        <copy todir="${location.classes}">
            <fileset dir="src/main"/>
        </copy>

        <copy todir="${location.test-infrastructure-classes}">
            <fileset dir="src/test-infrastructure"/>
        </copy>

        <copy todir="${location.test-classes}">
            <fileset dir="src/test"/>
        </copy>

        <copy todir="${location.performance-test-classes}">
            <fileset dir="src/performance-test"/>
        </copy>

        <copy todir="${location.code-sample-test-classes}">
            <fileset dir="src/code-samples"/>
        </copy>

        <echo message="Finished compile"/>
    </target>

    <target name="test" depends="compile" description="builds and runs unit tests">
        <delete dir="${location.test-results}"/>
        <mkdir dir="${location.test-results}"/>
        <junit printsummary="yes" errorproperty="unit-test-failure">
            <classpath>
                <pathelement location="${location.test-infrastructure-classes}"/>
                <pathelement location="${location.test-classes}"/>
                <pathelement location="${location.classes}"/>
                <path refid="test-compile-libs"/>
            </classpath>
            <batchtest fork="yes" todir="${location.test-results}">
                <fileset dir="${location.test-classes}">
                    <include name="**/*Test.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>

        <junitreport todir="${location.test-results}">
            <fileset dir="${location.test-results}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${location.test-results}"/>
        </junitreport>

        <fail if="unit-test-failure" message="Unit tests failed."/>
    </target>

    <target name="performance-test" depends="compile" description="builds and runs performance tests">
        <delete dir="${location.performance-test-results}"/>
        <mkdir dir="${location.performance-test-results}"/>
        <junit printsummary="yes" errorproperty="performance-test-failure">
            <classpath>
                <pathelement location="${location.performance-test-classes}"/>
                <pathelement location="${location.classes}"/>
                <path refid="performance-test-compile-libs"/>
                <path refid="test-compile-libs"/>
                <path refid="performance-test-run-libs"/>
                <pathelement location="${location.src.performance-test}"/>
            </classpath>
            <batchtest fork="yes" todir="${location.performance-test-results}">
                <fileset dir="${location.performance-test-classes}">
                    <include name="**/*Test.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>

        <junitreport todir="${location.performance-test-results}">
            <fileset dir="${location.performance-test-results}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${location.performance-test-results}"/>
        </junitreport>

        <fail if="performance-test-failure" message="Performance tests failed."/>
    </target>

    <target name="code-sample-test" depends="compile" description="builds and runs code samples">
        <delete dir="${location.code-sample-test-results}"/>
        <mkdir dir="${location.code-sample-test-results}"/>
        <junit printsummary="yes" errorproperty="code-sample-failure">
            <classpath>
                <pathelement location="${location.code-sample-test-classes}"/>
                <pathelement location="${location.classes}"/>
                <path refid="test-compile-libs"/>
                <pathelement location="${location.src.code-sample}"/>
            </classpath>
            <batchtest fork="yes" todir="${location.code-sample-test-results}">
                <fileset dir="${location.code-sample-test-classes}">
                    <include name="**/*Examples.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>

        <junitreport todir="${location.code-sample-test-results}">
            <fileset dir="${location.code-sample-test-results}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${location.code-sample-test-results}"/>
        </junitreport>

        <fail if="code-sample-failure" message="Code samples failed."/>
    </target>

    <target name="documentation">
        <property name="location.dist.documentation" value="${location.dist}/documentation/${version}"/>
        <property name="location.dist.resources" value="${location.dist}/resources/"/>
        <mkdir dir="${location.dist.documentation}"/>
        <copy todir="${location.dist.documentation}">
            <fileset dir="${location.documentation}"/>
        </copy>
        <typedef name="rasterize" classname="org.apache.tools.ant.taskdefs.optional.RasterizerTask">
            <classpath>
                <pathelement location="${location.lib}/build/RasterizerTask.jar"/>
                <pathelement location="${location.lib}/build/batik-all.jar"/>
                <pathelement location="${location.lib}/build/xml-apis-ext.jar"/>
            </classpath>
        </typedef>
        <rasterize result="image/png" src="resources/favicon.svg"
                   dest="${location.dist.documentation}/favicon-32x32.png" classname="jaxp" width="32" height="32"/>
        <rasterize result="image/png" src="resources/favicon.svg"
                   dest="${location.dist.resources}/favicon-64x64.png" classname="jaxp" height="64" width="64"/>
        <taskdef name="svg2ico" classname="net.sourceforge.svg2ico.Svg2IcoTask"
                 classpath="${location.lib}/build/svg2ico-0.14.jar"/>
        <svg2ico src="resources/favicon.svg" dest="${location.dist.documentation}/favicon.ico" width="32" height="32"/>
        <java classname="documentation.DocumentationGenerator" failonerror="true" fork="true">
            <arg value="${location.dist.documentation}"/>
            <classpath>
                <pathelement path="${location.build-classes}"/>
                <path refid="documentation-libs"/>
                <pathelement location="${location.classes}"/>
            </classpath>
        </java>
        <mkdir dir="${location.dist.documentation}/javadoc"/>
        <javadoc destdir="${location.dist.documentation}/javadoc" windowtitle="Argo version ${version}"
                 doctitle="Argo version ${version}" linksource="true">
            <sourcepath path="${location.src}"/>
        </javadoc>
    </target>

    <target name="pom">
        <mkdir dir="${location.dist.maven}"/>
        <java classname="build.maven.PomGenerator" failonerror="true" fork="true">
            <arg value="${location.dist.maven}"/>
            <arg value="${maven-staging-repository-id}"/>
            <arg value="${sonatype.username}"/>
            <arg value="${sonatype.password}"/>
            <arg value="${gpg.passphrase}"/>
            <classpath>
                <pathelement path="${location.build-classes}"/>
                <path refid="documentation-libs"/>
                <pathelement location="${location.classes}"/>
            </classpath>
        </java>
    </target>

    <target name="development-version" unless="release">
        <property file="version.properties"/>
        <tstamp>
            <format property="timestamp" pattern="yyyyMMddHHmm" locale="en" timezone="UTC"/>
        </tstamp>
        <property name="version" value="${argo.version.major}.${argo.version.minor}-${timestamp}"/>
    </target>

    <target name="release-version" if="release">
        <property file="version.properties"/>
        <property name="version" value="${argo.version.major}.${argo.version.minor}"/>
    </target>

    <target name="determine-version" depends="development-version, release-version">
        <echo message="Version for build is: ${version}"/>
    </target>

    <target name="distribute" depends="compile, test, performance-test, code-sample-test, determine-version">
        <echo message="Creating release structure"/>
        <property name="location.dist.binaries" value="${location.dist}/binaries/${version}"/>
        <delete dir="${location.dist}"/>
        <mkdir dir="${location.dist.binaries}"/>

        <antcall target="documentation"/>
        <antcall target="pom"/>
        <jar basedir="${location.classes}" destfile="${location.dist.binaries}/argo-${version}.jar"/>
        <jar basedir="${location.optimised-classes}" destfile="${location.dist.binaries}/argo-small-${version}.jar"/>

        <jar basedir="${location.classes}" destfile="${location.dist.maven}/argo-${version}.jar"/>
        <jar basedir="${location.src}"
             destfile="${location.dist.maven}/argo-${version}-sources.jar"/>
        <jar basedir="${location.dist}/documentation/${version}/javadoc"
             destfile="${location.dist.maven}/argo-${version}-javadoc.jar"/>
    </target>

    <target name="prepare-release" description="Builds an official release locally">
        <property name="release" value="true"/>
        <antcall target="distribute"/>
    </target>

    <target name="distribute-release-maven" description="deploy release version to Maven staging repository"
            xmlns:artifact="antlib:org.apache.maven.artifact.ant">
        <property name="release.directory.maven" value="${release.directory}/build/dist/maven"/>
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-s${release.directory.maven}/settings.xml"/>
            <artifact:arg value="-Durl=${maven-staging-repository-url}"/>
            <artifact:arg value="-DrepositoryId=${maven-staging-repository-id}"/>
            <artifact:arg value="-DpomFile=${release.directory.maven}/pom.xml"/>
            <artifact:arg value="-Dfile=${release.directory.maven}/argo-${version}.jar"/>
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>

        <!-- sign and deploy the sources artifact -->
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-s${release.directory.maven}/settings.xml"/>
            <artifact:arg value="-Durl=${maven-staging-repository-url}"/>
            <artifact:arg value="-DrepositoryId=${maven-staging-repository-id}"/>
            <artifact:arg value="-DpomFile=${release.directory.maven}/pom.xml"/>
            <artifact:arg value="-Dfile=${release.directory.maven}/argo-${version}-sources.jar"/>
            <artifact:arg value="-Dclassifier=sources"/>
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>

        <!-- sign and deploy the javadoc artifact -->
        <artifact:mvn>
            <artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>
            <artifact:arg value="-s${release.directory.maven}/settings.xml"/>
            <artifact:arg value="-Durl=${maven-staging-repository-url}"/>
            <artifact:arg value="-DrepositoryId=${maven-staging-repository-id}"/>
            <artifact:arg value="-DpomFile=${release.directory.maven}/pom.xml"/>
            <artifact:arg value="-Dfile=${release.directory.maven}/argo-${version}-javadoc.jar"/>
            <artifact:arg value="-Dclassifier=javadoc"/>
            <artifact:arg value="-Pgpg"/>
        </artifact:mvn>

        <!-- close the staging repository, whatever that means -->
        <artifact:mvn>
            <artifact:arg value="org.sonatype.plugins:nexus-staging-maven-plugin:rc-close"/>
            <artifact:arg value="-s${release.directory.maven}/settings.xml"/>
            <artifact:arg value="-DserverId=${maven-staging-repository-id}"/>
            <artifact:arg value="-DnexusUrl=https://oss.sonatype.org"/>
            <artifact:arg value="-DstagingRepositoryId=net.sourceforge.argo"/>
        </artifact:mvn>

        <!-- release the staging repository -->
        <artifact:mvn>
            <artifact:arg value="org.sonatype.plugins:nexus-staging-maven-plugin:rc-release"/>
            <artifact:arg value="-s${release.directory.maven}/settings.xml"/>
            <artifact:arg value="-DserverId=${maven-staging-repository-id}"/>
            <artifact:arg value="-DnexusUrl=https://oss.sonatype.org"/>
            <artifact:arg value="-DstagingRepositoryId=net.sourceforge.argo"/>
        </artifact:mvn>
    </target>

    <target name="distribute-release" description="Does a real release">

        <input addproperty="ssh.username" message="Sourceforge SSH username"/>
        <input addproperty="ssh.password" message="Sourceforge SSH password"/>

        <input addproperty="sonatype.username" message="Sonatype username"/>
        <input addproperty="sonatype.password" message="Sonatype password"/>
        <input addproperty="gpg.passphrase" message="GPG passphrase"/>

        <svn username="${ssh.username}" password="${ssh.password}">
            <info target="https://svn.code.sf.net/p/argo/code/trunk"/>
        </svn>
        <property name="release.revision" value="${svn.info.rev}"/>
        <echo message="Attempting to release revision ${release.revision}"/>
        <property name="release.directory" value="${location.build}/release/${release.revision}"/>
        <delete dir="${location.build}"/>
        <svn username="${ssh.username}" password="${ssh.password}">
            <export srcurl="https://svn.code.sf.net/p/argo/code/trunk" destpath="${release.directory}"
                    revision="${svn.info.rev}"/>
        </svn>
        <subant target="prepare-release" buildpath="${release.directory}">
            <property name="sonatype.username" value="${sonatype.username}"/>
            <property name="sonatype.password" value="${sonatype.password}"/>
            <property name="gpg.passphrase" value="${gpg.passphrase}"/>
        </subant>
        <property file="${release.directory}/version.properties"/>
        <property name="version" value="${argo.version.major}.${argo.version.minor}"/>
        <svn username="${ssh.username}" password="${ssh.password}">
            <copy srcurl="https://svn.code.sf.net/p/argo/code/trunk"
                  desturl="https://svn.code.sf.net/p/argo/code/tags/${version}" revision="${svn.info.rev}"
                  message="Tag for release ${version}."/>
        </svn>
        <sshexec host="shell.sourceforge.net" username="${ssh.username},argo" password="${ssh.password}"
                 command="create" trust="true"/>
        <scp todir="${ssh.username},argo@web.sourceforge.net:/home/project-web/argo/" password="${ssh.password}"
             trust="true">
            <fileset dir="${release.directory}/build/dist/documentation/"/>
        </scp>
        <scp todir="${ssh.username},argo@web.sourceforge.net:/home/frs/project/a/ar/argo/argo/"
             password="${ssh.password}" trust="true">
            <fileset dir="${release.directory}/build/dist/binaries/"/>
        </scp>
        <sshexec host="shell.sourceforge.net" username="${ssh.username},argo" password="${ssh.password}"
                 command="rm /home/project-web/argo/htdocs ; ln -s /home/project-web/argo/${version} /home/project-web/argo/htdocs"
                 trust="true"/>
        <antcall target="distribute-release-maven"/>
        <propertyfile file="version.properties">
            <entry key="argo.version.minor" type="int" default="0" operation="+"/>
        </propertyfile>
        <svn username="${ssh.username}" password="${ssh.password}">
            <commit file="version.properties" message="Increment minor revision number post-release."/>
        </svn>
    </target>

</project>